---
alwaysApply: true
---

# UniversalSynSaveInstance Project Context

## Project Overview

**UniversalSynSaveInstance (USSI)** is a Roblox/Luau project designed for comprehensive game save instance functionality. The project is currently in early development stages with a structured build pipeline but empty main source files, indicating this is either a fresh start or a rewrite of existing functionality.

## Technology Stack

### Core Technologies
- **Luau/Lua**: Primary programming language for Roblox development
- **Lune v0.10.2**: Standalone Luau runtime for build tooling and external operations
- **Fusion v0.3-beta**: Reactive UI framework for Roblox interface development
- **roblox-lua-promise**: Asynchronous operation handling library
- **TableUtil**: Comprehensive table manipulation utilities (Copy, Map, Filter, Reduce, etc.)
- **rbxmSuite**: Package manager for downloading Roblox assets and dependencies

### Build & Development Tools
- **Rokit**: Toolchain manager for Roblox projects
- **darklua v0.17.1**: Lua code processor for optimization, bundling, and transformation
- **StyLua v2.3.0**: Lua code formatter with Windows line endings and tab indentation

## Project Structure

### Key Directories
```
UniversalSynSaveInstance/
├── packages/           # External library integrations (ready to use)
│   ├── fusion.luau     # Fusion UI framework wrapper
│   ├── promise.luau    # Promise async library wrapper
│   ├── rbxmSuite.luau  # Roblox package manager
│   └── tableUtil.luau  # Table manipulation utilities
├── pipeline/           # Build system and configuration (fully functional)
│   ├── build.luau      # Main build script (Lune-based)
│   ├── frame.luau      # Template file for generated builds
│   ├── .pcmp.json      # Pipeline configuration (build configs, deployment)
│   ├── .darklua.json   # Production darklua configuration
│   └── .darklua_debug.json # Debug darklua configuration
├── src/                # Main source code (currently empty - needs implementation)
│   ├── init.luau       # Main entry point (currently empty)
│   ├── types.luau      # Type definitions (currently empty)
│   ├── modules/        # Feature modules (empty)
│   └── utilities/      # Utility functions (empty)
├── tests/              # Test files (currently empty)
│   ├── pre/            # Pre-build tests (empty)
│   ├── mid/            # Mid-build tests (empty)
│   └── post/           # Post-build tests (empty)
└── generated/          # Build outputs (empty - populated after builds)
```

## Available Packages (Ready to Import)

All external dependencies are already configured and ready to use:

```lua
-- Import Fusion UI framework
local Fusion = require("@packages/fusion")

-- Import Promise for async operations
local Promise = require("@packages/promise")

-- Import TableUtil for data manipulation
local TableUtil = require("@packages/tableUtil")

-- Import rbxmSuite for Roblox asset management
local rbxmSuite = require("@packages/rbxmSuite")
```

## Build System (Fully Functional)

The project has **4 build configurations**:

### 1. **Test Build** (`tests/test.luau` → `generated/test.client.luau`)
- Debug configuration with line retention
- No version prompting, no deployment

### 2. **Debug Build** (`src/init.luau` → `generated/debug.luau`)
- Development build with debug settings
- No optimization, retains all debugging info

### 3. **Beta Build** (`src/init.luau` → `generated/dist.luau`)
- Pre-release build with optimization
- Prompts for version, enables deployment
- Marked as prerelease on GitHub

### 4. **Release Build** (`src/init.luau` → `generated/dist.luau`)
- Production build with full optimization
- Prompts for version, enables deployment
- Full production release

## Build Process Workflow

### Using the Build System:

1. **Configure Build**: Edit `pipeline/.pcmp.json` to customize build settings
2. **Run Build**: Execute `lune run pipeline/build.luau pipeline/.pcmp.json`
3. **Select Configuration**: Choose from Test/Debug/Beta/Release when prompted
4. **Set Version**: For Beta/Release builds, specify version (e.g., "v1.0.0")
5. **Deploy**: Optionally deploy to GitHub with release notes

### Build Configuration Features:

- **Template Injection**: Build metadata (date, version, config) injected into final output
- **Multiple Optimization Levels**: Debug vs Production darklua configurations
- **GitHub Integration**: Automated releases with asset upload
- **VS Code Integration**: Auto-opens generated files in editor

## Code Quality Standards

### Formatting (StyLua Configuration):
- **Line Endings**: Windows (CRLF)
- **Indentation**: Tabs (4 spaces wide)
- **Quote Style**: AutoPreferDouble
- **Column Width**: 120 characters
- **Spacing**: Aggressive spacing for readability

### Darklua Processing:
- **Debug**: Retains lines, minimal processing
- **Production**: Aggressive optimization (removes comments, unused code, types, etc.)

## Executor API Standard: sUNC Compliance

**CRITICAL**: This project **exclusively** uses the **sUNC API standard** (https://docs.sunc.su/).

### sUNC Compliance Requirements

1. **No function aliases** - Only exact sUNC function names are used
2. **No alternative naming** - No fallback to legacy or executor-specific names
3. **Strict naming convention** - All function names match sUNC specification exactly
4. **Organized by category**:
   - **Reflection**: `gethiddenproperty`, `sethiddenproperty`, `setscriptable`, `setthreadidentity`, `getthreadidentity`
   - **Scripts**: `getscriptbytecode`, `getscripthash`, `getsenv`, `loadstring`, etc.
   - **Instances**: `getinstances`, `getnilinstances`, `cloneref`, `gethui`, etc.
   - **Cryptography**: `crypt.base64encode`, `crypt.base64decode` (in `crypt` table)
   - **Debug**: `debug.getconstants`, `debug.getupvalues`, etc. (in `debug` table)
   - **Closures**: `hookfunction`, `clonefunction`, `iscclosure`, etc.
   - **Signals**: `getconnections`, `firesignal`
   - **Miscellaneous**: `identifyexecutor`, `request`

### Why sUNC Standard?

- **Consistency**: All sUNC-compliant executors use identical function names
- **No detection loops**: No need to check multiple aliases (e.g., `gethiddenprop`, `GetHiddenProperty`, etc.)
- **Clear specification**: Official documentation at https://docs.sunc.su/
- **Simplicity**: Single source of truth for API naming

### Executor Module (`src/utilities/executor.luau`)

The executor utility provides:
- Direct access to sUNC API via `Executor.api.*`
- Safe wrappers with error handling
- Validation of function availability and correctness
- Fallback implementations (UGCValidationService, external libraries) when sUNC functions unavailable

## Development Workflow

### 1. **Initial Setup** (Already Complete)
- All toolchain dependencies configured via `rokit.toml`
- Build pipeline fully functional
- Package management ready
- sUNC API wrapper implemented in `src/utilities/executor.luau`

### 2. **Core Development** (Current Phase)
- Implement main functionality in `src/init.luau`
- Define types in `src/types.luau`
- Create feature modules in `src/modules/`
- Add utility functions in `src/utilities/`
- **Use sUNC API exclusively** via executor module

### 3. **Build & Test** (Ready to Use)
- Run builds with `lune run pipeline/build.luau pipeline/.pcmp.json`
- Test different configurations (Test/Debug/Beta/Release)
- Validate generated output in `generated/` directory

### 4. **Deployment** (Configured)
- Beta/Release builds can auto-deploy to GitHub
- Requires `.env` file with `GITHUB_API_KEY` for deployment
- Assets automatically uploaded as release assets

## Key Integration Points

### Roblox Platform Integration:
```lua
-- Access Roblox services through the service wrapper
local service = require("@modules/services")
local runService = service.RunService
local httpService = service.HttpService
```

### External Dependencies:
```lua
-- All external libraries loaded via HTTP or rbxmSuite
-- Fusion, Promise, TableUtil, rbxmSuite all ready to use
```

### Module Resolution:
- Uses path-based require mode with Luau configuration
- Supports nested module structures

## Current State Assessment

### What's Working
- ✅ Complete build pipeline infrastructure
- ✅ Dependency management (Rokit, rbxmSuite)
- ✅ Multiple build configurations with different optimization levels
- ✅ GitHub deployment integration
- ✅ Code formatting and linting setup
- ✅ External library integrations ready

### What's Missing/Empty
- ❌ Main source code (`src/init.luau` is empty)
- ❌ Type definitions (`src/types.luau` is empty)
- ❌ Feature modules and utilities
- ❌ Test implementations
- ❌ Build outputs in `generated/` directory

### Technical Debt & Risks
- Empty main source files suggest this is either a fresh project or major rewrite
- Build configuration references non-existent test files
- No visible game logic or save instance implementation
- Dependency on external services (GitHub API for deployment)

## Success Criteria & Metrics

### Current Goals (Inferred)
Based on project name and structure, likely goals include:
- Universal save instance functionality across different Roblox game types
- Support for both model and game file saving
- XML and binary format support
- UI and headless operation modes
- Comprehensive error handling and logging

### Quality Standards
- Zero information loss in save operations
- Complete documentation and commenting
- Multiple reference implementation verification
- Aggressive error handling and edge case testing

## Next Steps for Implementation

1. **Study Reference Material**: Analyze the old saveinstance code and Cascade UI structure
2. **Define Core Types**: Create comprehensive type definitions in `src/types.luau`
3. **Implement Core Logic**: Build the main saveinstance functionality in `src/init.luau`
4. **Create Feature Modules**: Organize functionality into `src/modules/`
5. **Add Utilities**: Implement helper functions in `src/utilities/`
6. **Build & Test**: Use the existing build system to validate implementation
7. **Deploy**: Use Beta/Release builds for distribution

